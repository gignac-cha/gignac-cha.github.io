{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["library","add","fas","far","fab","App","props","onResizes","window","e","setSize","onClicks","updating","setState","state","onChanges","addition","_","toNumber","currentTarget","value","wind","width","$","height","update","tick","snows","fps","context","canvas","getContext","fillStyle","fillRect","count","length","random","chain","range","forEach","i","snow","x","y","z","size","degree","push","map","alpha","beginPath","arc","Math","cos","PI","fill","closePath","filter","reverse","splice","updateTask","setTimeout","this","on","clearTimeout","className","ref","style","position","left","top","onClick","icon","faPause","faPlay","type","min","max","step","onChange","JSON","stringify","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32d9602b.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\n\nimport $ from 'jquery';\nimport _ from 'lodash';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { far } from '@fortawesome/free-regular-svg-icons';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n// Add all icons to the library so you can use it in your page\nlibrary.add(fas, far, fab);\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0,\n      height: 0,\n      updating: false,\n      updateTask: -1,\n      fps: 0,\n      addition: 0,\n      count: 0,\n      wind: 0,\n    };\n  }\n  componentDidMount() {\n    this.setSize();\n    $(window).on('resize', this.onResizes.window);\n    const updating = true;\n    const updateTask = setTimeout(this.update);\n    const fps = 60;\n    this.setState({ updating, updateTask, fps });\n  }\n  componentWillUnmount() {\n    clearTimeout(this.state.updateTask);\n  }\n  render() {\n    const styles = {\n      canvas: {\n        position: 'fixed',\n        left: 0,\n        top: 0,\n      },\n    };\n    return (\n      <div className=\"container-fluid\">\n        <canvas ref={e => this.canvas = e} width={this.state.width} height={this.state.height} style={styles.canvas}></canvas>\n        <div className=\"row mt-4\">\n          <div className=\"col col-1\">\n            <button className=\"form-control\" onClick={this.onClicks.updating}><FontAwesomeIcon icon={this.state.updating ? fas.faPause : fas.faPlay} /></button>\n          </div>\n          <div className=\"col col-1\">\n            <input className=\"form-control\" type=\"range\" min={3} max={100} step={1} value={this.state.addition} onChange={this.onChanges.addition} />\n          </div>\n          <div className=\"col col-1\">\n            <input className=\"form-control\" type=\"range\" min={-10} max={10} step={1} value={this.state.wind} onChange={this.onChanges.wind} />\n          </div>\n        </div>\n        <div className=\"row mt-4\">\n          <div className=\"col col-12\">\n            <pre className=\"text-light\">width: {this.state.width}</pre>\n            <pre className=\"text-light\">height: {this.state.height}</pre>\n            <pre className=\"text-light\">updating: {JSON.stringify(this.state.updating)}</pre>\n            <pre className=\"text-light\">addition: {this.state.addition}</pre>\n            <pre className=\"text-light\">count: {this.state.count}</pre>\n            <pre className=\"text-light\">wind: {this.state.wind}</pre>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col col-12\">\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col col-12\">\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  onResizes = {\n    window: e => () => this.setSize(),\n  }\n  onClicks = {\n    updating: e => {\n      this.setState({ updating: !this.state.updating })\n    },\n  }\n  onChanges = {\n    addition: e => {\n      const addition = _.toNumber(e.currentTarget.value);\n      this.setState({ addition });\n    },\n    wind: e => {\n      const wind = _.toNumber(e.currentTarget.value);\n      this.setState({ wind });\n    },\n  }\n\n  setSize = () => {\n    const width = $(window).width();\n    const height = $(window).height();\n    this.setState({ width, height });\n  }\n\n  update = (tick = 0, snows = []) => {\n    const { width, height, updating, fps, addition, wind } = this.state;\n    if (updating) {\n      const context = this.canvas.getContext('2d');\n      // context.clearRect(0, 0, width, height);\n\n      context.fillStyle = '#333';\n      context.fillRect(0, 0, width, height);\n\n      if (tick % (fps / 10) === 0) {\n        const count = snows.length > 0 ? _.random(addition - 3, addition + 3) : _.random(5, 10);\n        _.chain(count).range().forEach(i => {\n          const x = _.random(-width, width * 2);\n          const y = 0;\n          const z = _.random(-5, 5);\n          const size = _.random(2, 5);\n          const degree = _.random(360);\n          const snow = { x, y, z, size, degree };\n          snows.push(snow);\n          return true;\n        }).value();\n        this.setState({ count: snows.length });\n      }\n\n      _.chain(snows).map((snow, i) => {\n        const { x, y, z, size, degree } = snow;\n        const alpha = .75 + z * .5;\n        context.beginPath();\n        context.fillStyle = `rgba(255, 255, 255, ${alpha})`;\n        context.arc(x + 10 * Math.cos(degree / 360 * 2 * Math.PI), y, size, 0, 2 * Math.PI);\n        context.fill();\n        context.closePath();\n        if (y < height + size) {\n          snow.x += wind\n          snow.y += size;\n          snow.degree += 3;\n          snow.degree %= 360;\n        } else {\n          return i;\n        }\n      }).filter().reverse().forEach(i => {\n        snows.splice(i, 1);\n      }).value();\n    }\n    const updateTask = setTimeout(this.update, 1000 / fps, (tick + 1) % fps, snows);\n    this.setState({ updateTask });\n  }\n}\n\n// function App() {\n//   const [ updating, setUpdating ] = useState(true);\n\n//   // const [ width, setWidth ] = useState();\n//   // const [ height, setHeight ] = useState();\n//   const [ size, setSize ] = useState({});\n//   useEffect(() => {\n//     // const setSize = () => {\n//     //   // setWidth($(window).width());\n//     //   // setHeight($(window).height());\n//     // };\n//     const getSize = () => ({ width: $(window).width(), height: $(window).height() });\n//     setSize(getSize());\n//     const onResize = e => setSize(getSize());\n//     $(window).on('resize', onResize);\n//     return () => $(window).off('resize', onResize);\n//   }, []);\n\n//   // const [ canvas, setCanvas ] = useState();\n//   const refCanvas = useRef();\n\n//   // const [ count, setCount ] = useState(0);\n\n//   const fps = 60;\n//   const [ updateTask, setUpdateTask ] = useState();\n//   useEffect(() => {\n//     const update = tick => {\n//       const canvas = refCanvas.current;\n//       const context = canvas.getContext('2d');\n//       // context.clearRect(0, 0, size.width, size.height);\n//       context.beginPath();\n//       context.fillStyle = '#333';\n//       context.fillRect(0, 0, canvas.width, canvas.height);\n//       context.strokeStyle = 'red';\n//       context.moveTo(100 + tick, 100);\n//       context.lineTo(100 + tick * 2, 200);\n//       context.stroke();\n//       context.closePath();\n//       if (updating && tick % fps === 0) {\n//         // setCount(count => count + 1);\n//       }\n//       setUpdateTask(setTimeout(update, 1000 / fps, (tick + 1) % fps));\n//     };\n//     setUpdateTask(setTimeout(update, 0, 0));\n//     return () => clearTimeout(updateTask);\n//   }, [ updating, updateTask ]);\n\n//   const styles = {\n//     canvas: {\n//       position: 'fixed',\n//       left: 0,\n//       top: 0,\n//     },\n//   };\n\n//   const onClicks = {\n//     updating: e => {\n//       setUpdating(!updating);\n//     },\n//   };\n\n//   return (\n//     <div className=\"container-fluid\">\n//       <canvas ref={refCanvas} width={size.width} height={size.height} style={styles.canvas}></canvas>\n//       <div className=\"row mt-4\">\n//         <div className=\"col col-12\">\n//           <button onClick={onClicks.updating}><FontAwesomeIcon icon={updating ? fas.faPause : fas.faPlay} /></button>\n//         </div>\n//       </div>\n//       <div className=\"row mt-4\">\n//         <div className=\"col col-12\">\n//           {/* <pre className=\"text-light\">width: {width}</pre>\n//           <pre className=\"text-light\">height: {height}</pre> */}\n//           <pre className=\"text-light\">size: {JSON.stringify(size)}</pre>\n//           <pre className=\"text-light\">updating: {JSON.stringify(updating)}</pre>\n//           {/* <pre className=\"text-light\">count: {count}</pre> */}\n//         </div>\n//       </div>\n//       <div className=\"row\">\n//         <div className=\"col col-12\">\n//         </div>\n//       </div>\n//       <div className=\"row\">\n//         <div className=\"col col-12\">\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}